# Backend CI/CD: Build & push Docker image to Docker Hub, trigger Render deploy on main
# Required GitHub Secrets:
# - DOCKERHUB_USERNAME       : Docker Hub username
# - DOCKERHUB_TOKEN          : Docker Hub access token or password
# - RENDER_DEPLOY_HOOK_URL   : Render deploy hook URL for the backend service (configured to use the :latest image)
#
# Optional (not required if using deploy hook with latest tag):
# - RENDER_API_KEY           : Render API key (if using API-based deploys)
# - RENDER_SERVICE_ID        : Render Service ID
#
# Notes:
# - This workflow tries to find a Dockerfile in ./backend/ or project root. Adjust BACKEND_DIR if needed.
# - It pushes branch-tagged images for all branches; on main it also pushes :latest and triggers Render.

name: Backend CI/CD (Docker Hub -> Render)

on:
  push:
    branches: ["**"]
    paths:
      - 'backend/**'
      - 'Dockerfile'
      - 'pom.xml'
      - 'build.gradle'
      - 'build.gradle.kts'
      - '.github/workflows/backend-render.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    concurrency: backend-${{ github.ref }}
    env:
      BACKEND_DIR: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect backend Dockerfile
        id: detect
        shell: bash
        run: |
          if [ -f "$BACKEND_DIR/Dockerfile" ]; then
            echo "workdir=$BACKEND_DIR" >> $GITHUB_OUTPUT
            echo "dockerfile=$BACKEND_DIR/Dockerfile" >> $GITHUB_OUTPUT
          elif [ -f "Dockerfile" ]; then
            echo "workdir=." >> $GITHUB_OUTPUT
            echo "dockerfile=Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "workdir=" >> $GITHUB_OUTPUT
            echo "dockerfile=" >> $GITHUB_OUTPUT
          fi

      - name: Setup Docker Buildx
        if: ${{ steps.detect.outputs.workdir != '' }}
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub login
        if: ${{ steps.detect.outputs.workdir != '' && secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute image tags
        if: ${{ steps.detect.outputs.workdir != '' && secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        id: vars
        shell: bash
        run: |
          REPO="${{ secrets.DOCKERHUB_USERNAME }}/clothing-multivendor-backend"
          SHA_TAG="${REPO}:${{ github.sha }}"
          # sanitize branch name: replace '/' and invalid chars with '-'
          BRANCH="${GITHUB_REF_NAME//\//-}"
          BRANCH_TAG="${REPO}:${BRANCH}-${{ github.sha }}"
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "branch_tag=$BRANCH_TAG" >> $GITHUB_OUTPUT
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            echo "latest_tag=${REPO}:latest" >> $GITHUB_OUTPUT
          else
            echo "latest_tag=" >> $GITHUB_OUTPUT
          fi

      - name: Build and push image
        if: ${{ steps.detect.outputs.workdir != '' && steps.vars.outputs.repo != '' }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.detect.outputs.workdir }}
          file: ${{ steps.detect.outputs.dockerfile }}
          push: true
          tags: |
            ${{ steps.vars.outputs.branch_tag }}
            ${{ steps.vars.outputs.sha_tag }}
            ${{ steps.vars.outputs.latest_tag }}
          cache-from: type=registry,ref=${{ steps.vars.outputs.repo }}:buildcache
          cache-to: type=registry,ref=${{ steps.vars.outputs.repo }}:buildcache,mode=max

      - name: Trigger Render deploy (main only)
        if: ${{ steps.detect.outputs.workdir != '' && steps.vars.outputs.latest_tag != '' && secrets.RENDER_DEPLOY_HOOK_URL != '' }}
        shell: bash
        run: |
          curl -fsSL -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"

      - name: Skip (backend Dockerfile not found)
        if: ${{ steps.detect.outputs.workdir == '' }}
        run: echo "No backend Dockerfile found in ./backend or ./ . Skipping build/deploy."
